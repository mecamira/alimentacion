// src/components/ShoppingList.js
import React, { useState } from 'react';
import { Plus, ShoppingCart, Check, Trash2, Package } from 'lucide-react';
import { shoppingService, pantryService } from '../services/firebaseService';

const ShoppingList = ({ shoppingItems, pantryItems, onRefresh }) => {
  const [showAddForm, setShowAddForm] = useState(false);
  const [newItem, setNewItem] = useState({
    name: '',
    quantity: 1,
    unit: 'unidades',
    category: 'Otros',
    priority: 'normal'
  });

  const units = [
    'unidades',
    'kg',
    'g',
    'l',
    'ml',
    'paquetes',
    'latas',
    'cajas'
  ];

  const categories = [
    'Verduras y Hortalizas',
    'Frutas',
    'Carnes',
    'Pescados y Mariscos',
    'Lácteos',
    'Cereales y Legumbres',
    'Condimentos y Especias',
    'Bebidas',
    'Conservas',
    'Congelados',
    'Otros'
  ];

  const priorities = [
    { value: 'high', label: 'Alta', color: '#ff4757' },
    { value: 'normal', label: 'Normal', color: '#3742fa' },
    { value: 'low', label: 'Baja', color: '#70a1ff' }
  ];

  // Separar items comprados y pendientes
  const pendingItems = shoppingItems.filter(item => !item.purchased);
  const purchasedItems = shoppingItems.filter(item => item.purchased);

  // Agrupar items pendientes por categoría
  const groupedPendingItems = pendingItems.reduce((groups, item) => {
    const category = item.category || 'Otros';
    if (!groups[category]) {
      groups[category] = [];
    }
    groups[category].push(item);
    return groups;
  }, {});

  // Añadir item a la lista
  const handleAddItem = async (e) => {
    e.preventDefault();
    try {
      await shoppingService.addShoppingItem(newItem);
      setNewItem({
        name: '',
        quantity: 1,
        unit: 'unidades',
        category: 'Otros',
        priority: 'normal'
      });
      setShowAddForm(false);
      onRefresh();
    } catch (error) {
      console.error('Error adding shopping item:', error);
      alert('Error al añadir el producto a la lista');
    }
  };

  // Marcar como comprado y añadir/actualizar en despensa
  const handleMarkAsPurchased = async (item) => {
    try {
      // Marcar como comprado en la lista
      await shoppingService.markAsPurchased(item.id, item.quantity);

      // Verificar si el producto ya existe en la despensa
      const existingPantryItem = pantryItems.find(pantryItem => 
        pantryItem.name.toLowerCase() === item.name.toLowerCase()
      );

      if (existingPantryItem) {
        // Actualizar cantidad en despensa
        const newQuantity = existingPantryItem.quantity + item.quantity;
        await pantryService.updatePantryItem(existingPantryItem.id, {
          quantity: newQuantity
        });
      } else {
        // Añadir nuevo producto a la despensa
        await pantryService.addPantryItem({
          name: item.name,
          quantity: item.quantity,
          unit: item.unit,
          category: item.category,
          minQuantity: 1
        });
      }

      onRefresh();
    } catch (error) {
      console.error('Error marking as purchased:', error);
      alert('Error al marcar como comprado');
    }
  };

  // Eliminar item de la lista
  const handleDeleteItem = async (itemId) => {
    if (window.confirm('¿Estás seguro de que quieres eliminar este producto de la lista?')) {
      try {
        await shoppingService.deleteShoppingItem(itemId);
        onRefresh();
      } catch (error) {
        console.error('Error deleting shopping item:', error);
        alert('Error al eliminar el producto');
      }
    }
  };

  // Generar lista automática basada en stock bajo
  const generateAutoList = async () => {
    try {
      const lowStockItems = pantryItems.filter(item => 
        item.quantity <= (item.minQuantity || 1)
      );

      for (const item of lowStockItems) {
        // Verificar que no esté ya en la lista de compras
        const alreadyInList = shoppingItems.some(shoppingItem => 
          shoppingItem.name.toLowerCase() === item.name.toLowerCase() && !shoppingItem.purchased
        );

        if (!alreadyInList) {
          const neededQuantity = Math.max(1, (item.minQuantity || 1) * 2 - item.quantity);
          await shoppingService.addShoppingItem({
            name: item.name,
            quantity: neededQuantity,
            unit: item.unit,
            category: item.category,
            priority: item.quantity === 0 ? 'high' : 'normal',
            autoGenerated: true
          });
        }
      }

      onRefresh();
      alert(`Se añadieron ${lowStockItems.length} productos con stock bajo a la lista`);
    } catch (error) {
      console.error('Error generating auto list:', error);
      alert('Error al generar la lista automática');
    }
  };

  const totalPending = pendingItems.length;
  const totalPurchased = purchasedItems.length;
  const highPriorityCount = pendingItems.filter(item => item.priority === 'high').length;

  return (
    <div className="shopping-list">
      <div className="shopping-header">
        <h2>
          <ShoppingCart size={24} />
          Lista de Compras
        </h2>
        <div className="header-actions">
          <button 
            onClick={generateAutoList}
            className="auto-button"
            disabled={pantryItems.filter(item => item.quantity <= (item.minQuantity || 1)).length === 0}
          >
            <Package size={20} />
            Generar Lista Automática
          </button>
          <button 
            onClick={() => setShowAddForm(true)}
            className="add-button"
          >
            <Plus size={20} />
            Añadir Producto
          </button>
        </div>
      </div>

      {/* Estadísticas */}
      <div className="shopping-stats">
        <div className="stat-item">
          <span className="stat-number">{totalPending}</span>
          <span className="stat-label">Por comprar</span>
        </div>
        <div className="stat-item success">
          <span className="stat-number">{totalPurchased}</span>
          <span className="stat-label">Comprados</span>
        </div>
        <div className="stat-item warning">
          <span className="stat-number">{highPriorityCount}</span>
          <span className="stat-label">Alta prioridad</span>
        </div>
      </div>

      {/* Formulario para añadir producto */}
      {showAddForm && (
        <div className="add-form-container">
          <form onSubmit={handleAddItem} className="add-form">
            <h3>Añadir a Lista de Compras</h3>
            <div className="form-row">
              <input
                type="text"
                placeholder="Nombre del producto"
                value={newItem.name}
                onChange={(e) => setNewItem({...newItem, name: e.target.value})}
                required
                className="form-input"
              />
              <input
                type="number"
                placeholder="Cantidad"
                value={newItem.quantity}
                onChange={(e) => setNewItem({...newItem, quantity: parseFloat(e.target.value) || 1})}
                min="0.1"
                step="0.1"
                required
                className="form-input"
              />
              <select
                value={newItem.unit}
                onChange={(e) => setNewItem({...newItem, unit: e.target.value})}
                className="form-select"
              >
                {units.map(unit => (
                  <option key={unit} value={unit}>{unit}</option>
                ))}
              </select>
            </div>
            <div className="form-row">
              <select
                value={newItem.category}
                onChange={(e) => setNewItem({...newItem, category: e.target.value})}
                className="form-select"
              >
                {categories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
              <select
                value={newItem.priority}
                onChange={(e) => setNewItem({...newItem, priority: e.target.value})}
                className="form-select"
              >
                {priorities.map(priority => (
                  <option key={priority.value} value={priority.value}>
                    {priority.label}
                  </option>
                ))}
              </select>
            </div>
            <div className="form-actions">
              <button type="submit" className="submit-button">
                Añadir a Lista
              </button>
              <button 
                type="button" 
                onClick={() => setShowAddForm(false)}
                className="cancel-button"
              >
                Cancelar
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Lista de compras pendientes */}
      <div className="shopping-content">
        <div className="pending-section">
          <h3>Por Comprar ({totalPending})</h3>
          
          {Object.keys(groupedPendingItems).length === 0 ? (
            <div className="empty-state">
              <ShoppingCart size={48} />
              <h4>Lista vacía</h4>
              <p>Añade productos a tu lista de compras</p>
            </div>
          ) : (
            Object.entries(groupedPendingItems).map(([category, items]) => (
              <div key={category} className="category-section">
                <h4 className="category-title">{category}</h4>
                <div className="shopping-items">
                  {items.map(item => (
                    <div key={item.id} className="shopping-item">
                      <div className="item-info">
                        <div className="item-header">
                          <span className="item-name">{item.name}</span>
                          <div 
                            className="priority-indicator"
                            style={{ 
                              backgroundColor: priorities.find(p => p.value === item.priority)?.color 
                            }}
                          >
                            {priorities.find(p => p.value === item.priority)?.label}
                          </div>
                        </div>
                        <div className="item-details">
                          <span className="quantity">{item.quantity} {item.unit}</span>
                          {item.autoGenerated && (
                            <span className="auto-tag">Auto</span>
                          )}
                        </div>
                      </div>
                      <div className="item-actions">
                        <button
                          onClick={() => handleMarkAsPurchased(item)}
                          className="action-button purchased"
                          title="Marcar como comprado"
                        >
                          <Check size={16} />
                        </button>
                        <button
                          onClick={() => handleDeleteItem(item.id)}
                          className="action-button delete"
                          title="Eliminar de la lista"
                        >
                          <Trash2 size={16} />
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))
          )}
        </div>

        {/* Historial de compras */}
        {purchasedItems.length > 0 && (
          <div className="purchased-section">
            <h3>Comprados Recientemente ({totalPurchased})</h3>
            <div className="purchased-items">
              {purchasedItems.slice(0, 10).map(item => (
                <div key={item.id} className="purchased-item">
                  <div className="item-info">
                    <span className="item-name">{item.name}</span>
                    <span className="quantity">{item.purchasedQuantity || item.quantity} {item.unit}</span>
                  </div>
                  <div className="purchase-date">
                    {item.purchasedAt && new Date(item.purchasedAt.seconds * 1000).toLocaleDateString('es-ES')}
                  </div>
                  <button
                    onClick={() => handleDeleteItem(item.id)}
                    className="action-button delete small"
                    title="Eliminar del historial"
                  >
                    <Trash2 size={14} />
                  </button>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ShoppingList;